// Code generated by MockGen. DO NOT EDIT.
// Source: seller.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/RyaWcksn/ecommerce/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockISeller is a mock of ISeller interface.
type MockISeller struct {
	ctrl     *gomock.Controller
	recorder *MockISellerMockRecorder
}

// MockISellerMockRecorder is the mock recorder for MockISeller.
type MockISellerMockRecorder struct {
	mock *MockISeller
}

// NewMockISeller creates a new mock instance.
func NewMockISeller(ctrl *gomock.Controller) *MockISeller {
	mock := &MockISeller{ctrl: ctrl}
	mock.recorder = &MockISellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISeller) EXPECT() *MockISellerMockRecorder {
	return m.recorder
}

// GetEmail mocks base method.
func (m *MockISeller) GetEmail(ctx context.Context, email string) (*entities.LoginEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail", ctx, email)
	ret0, _ := ret[0].(*entities.LoginEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockISellerMockRecorder) GetEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockISeller)(nil).GetEmail), ctx, email)
}
